{"version":3,"sources":["../../../src/cli/commands/Update.js"],"names":["UpdateCommand","Command","constructor","name","description","options","beta","CliOptions","getLatestVersion","useBetaRelease","then","res","data","updateNeeded","latestVersion","currentVersion","Logger","debug","format","value","update","cli","ExternalCommand","run","spawn","cwd","environment","Promise","all","resolve","modulePackage","version","versions","needed","info","requiresEnvironment"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACe,MAAMA,aAAN,SAA4BC,gBAA5B,CAAoC;AACjD;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMD,IAAN,EAAYC,WAAZ,EAAyB;AACvBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAEC,iBAAWD;AADV;AADc,KAAzB;AAKD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,gBAAgB,CAACC,cAAc,GAAG,KAAlB,EAAyB;AACvC,WAAO,gBAAI,sDAAJ,EAA4DC,IAA5D,CACJC,GAAD,IAASA,GAAG,CAACC,IAAJ,CAASH,cAAc,GAAG,MAAH,GAAY,QAAnC,CADJ,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,YAAY,CAACC,aAAD,EAAgBC,cAAhB,EAAgC;AAC1CC,oBAAOC,KAAP,CAAa,qBAAb,EAAoCD,gBAAOE,MAAP,CAAcC,KAAd,CAAoBL,aAApB,CAApC;;AACAE,oBAAOC,KAAP,CAAa,qBAAb,EAAoCD,gBAAOE,MAAP,CAAcC,KAAd,CAAoBJ,cAApB,CAApC;;AAEA,WAAO,gBAAGD,aAAH,EAAkBC,cAAlB,KAAqCD,aAA5C;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,MAAM,CAACC,GAAD,EAAMZ,cAAc,GAAG,KAAvB,EAA8B;AAClC,WAAOa,yBAAgBC,GAAhB,CACL,KADK,EAEL,CAAC,SAAD,EAAY,YAAZ,EAA2B,SAAQd,cAAc,GAAG,MAAH,GAAY,QAAS,EAAtE,CAFK,EAGL;AACEe,MAAAA,KAAK,EAAE;AACLC,QAAAA,GAAG,EAAEJ,GAAG,CAACK,WAAJ,CAAgBD;AADhB;AADT,KAHK,CAAP;AASD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEF,EAAAA,GAAG,CAACF,GAAD,EAAM;AACP,WAAOM,OAAO,CAACC,GAAR,CAAY,CACjB,KAAKpB,gBAAL,CAAsBa,GAAG,CAAChB,OAAJ,CAAYC,IAAlC,CADiB,EAEjBqB,OAAO,CAACE,OAAR,CAAgBR,GAAG,CAACK,WAAJ,CAAgBI,aAAhB,CAA8BC,OAA9C,CAFiB,CAAZ,EAIJrB,IAJI,CAIEsB,QAAD,IAAc,KAAKnB,YAAL,CAAkB,GAAGmB,QAArB,CAJf,EAKJtB,IALI,CAKEuB,MAAD,IAAY;AAChB,UAAIA,MAAJ,EAAY;AACVjB,wBAAOkB,IAAP,CAAY,qBAAZ,EAAmClB,gBAAOE,MAAP,CAAcC,KAAd,CAAoBc,MAApB,CAAnC;;AAEA,eAAO,KAAKb,MAAL,CAAYC,GAAZ,EAAiBA,GAAG,CAAChB,OAAJ,CAAYC,IAA7B,EAAmCI,IAAnC,CAAwC,MAAMM,gBAAOkB,IAAP,CAAY,OAAZ,CAA9C,CAAP;AACD;;AAED,aAAOlB,gBAAOkB,IAAP,CAAY,qBAAZ,CAAP;AACD,KAbI,CAAP;AAcD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,mBAAmB,GAAG;AACpB,WAAO,IAAP;AACD;;AAvFgD","sourcesContent":["import { get } from 'axios';\nimport { gt } from 'semver';\nimport Logger from '../../lib/util/Logger';\nimport Command from '../../lib/cli/Command';\nimport ExternalCommand from '../../lib/util/ExternalCommand';\nimport CliOptions from '../Options';\n\n/**\n * The command invoked by running \"update\".\n */\nexport default class UpdateCommand extends Command {\n  /**\n   * Creates a new {@link UpdateCommand} with the specified name and description.\n   * @param {string} name The command's name.\n   * @param {string} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      options: {\n        beta: CliOptions.beta,\n      },\n    });\n  }\n\n  /**\n   * Checks atscm's dist-tags in the npm registry and resolves with the latest version available.\n   * @param {boolean} [useBetaRelease=false] If beta versions should be used.\n   * @return {Promise<string>} Fulfilled with the latest atscm version available.\n   */\n  getLatestVersion(useBetaRelease = false) {\n    return get('https://registry.npmjs.org/-/package/atscm/dist-tags').then(\n      (res) => res.data[useBetaRelease ? 'beta' : 'latest']\n    );\n  }\n\n  /**\n   * Checks if an update is required with the given latest and current version.\n   * @param {string} latestVersion The latest version available.\n   * @param {string} currentVersion The current version to check against.\n   * @return {boolean|string} Returns `false` if no update is required or the version to install if\n   * an update is required.\n   */\n  updateNeeded(latestVersion, currentVersion) {\n    Logger.debug('Latest version:    ', Logger.format.value(latestVersion));\n    Logger.debug('Current version:   ', Logger.format.value(currentVersion));\n\n    return gt(latestVersion, currentVersion) && latestVersion;\n  }\n\n  /**\n   * Runs `npm install --save-dev atscm@latest` in a separate process.\n   * @param {AtSCMCli} cli The cli instance used.\n   * @param {boolean} [useBetaRelease=false] If beta versions should be used.\n   * @return {Promise<string, Error>} Fulfilled with npm's stdout or rejected with a spawn error or\n   * error code.\n   */\n  update(cli, useBetaRelease = false) {\n    return ExternalCommand.run(\n      'npm',\n      ['install', '--save-dev', `atscm@${useBetaRelease ? 'beta' : 'latest'}`],\n      {\n        spawn: {\n          cwd: cli.environment.cwd,\n        },\n      }\n    );\n  }\n\n  /**\n   * Updates atscm if a newer version is available.\n   * @param {AtSCMCli} cli The cli instance used.\n   * @return {Promise<*>} Resolved if the command completed suceessfully, rejected with the error\n   * that occurred otherwise.\n   */\n  run(cli) {\n    return Promise.all([\n      this.getLatestVersion(cli.options.beta),\n      Promise.resolve(cli.environment.modulePackage.version),\n    ])\n      .then((versions) => this.updateNeeded(...versions))\n      .then((needed) => {\n        if (needed) {\n          Logger.info('Updating to version', Logger.format.value(needed));\n\n          return this.update(cli, cli.options.beta).then(() => Logger.info('Done.'));\n        }\n\n        return Logger.info('Already up-to-date.');\n      });\n  }\n\n  /**\n   * This command always needs to be run inside an existant atscm project.\n   * @return {boolean} Always `true`.\n   */\n  requiresEnvironment() {\n    return true;\n  }\n}\n"],"file":"Update.js"}