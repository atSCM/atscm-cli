{"version":3,"sources":["../../../src/cli/commands/Init.js"],"names":["IgnoredFiles","defaultExport","mod","default","allowFunction","value","args","InitCommand","Command","constructor","name","description","options","yes","CliOptions","force","beta","link","checkDirectory","path","overwrite","Promise","resolve","reject","err","files","code","Error","Logger","format","filter","f","includes","toLowerCase","length","message","warn","colors","yellow","createEmptyPackage","Object","assign","originalMessage","runNpm","npm","child","on","npmErr","pipeLastLine","stderr","stdout","install","packages","concat","cwd","installLocal","useBetaRelease","info","debug","gray","checkCliVersion","env","required","modulePackage","engines","pkg","version","split","command","getDefaultOptions","reduce","current","option","when","undefined","choices","firstChoice","getOptions","modulePath","useDefaults","require","writeFiles","installDependencies","deps","run","cli","getEnvironment","then","environment","process","chdir","result","requiresEnvironment"],"mappings":"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","sourcesContent":["import { readdir, writeFile } from 'fs';\nimport { join } from 'path';\nimport { spawn } from 'child_process';\nimport which from 'which';\nimport { prompt } from 'inquirer';\nimport { satisfies as validVersion } from 'semver';\nimport Command from '../../lib/cli/Command';\nimport Logger from '../../lib/util/Logger';\nimport pkg from '../../../package.json';\nimport CliOptions from '../Options';\n\nconst IgnoredFiles = ['.ds_store', 'thumbs.db'];\n\n/**\n * Returns the default export of a module, if present.\n * @param {any | { default: any }} mod The required module.\n * @return {any} The module's default export.\n */\nfunction defaultExport(mod) {\n  return mod.default || mod;\n}\n\n/**\n * Utility that returns any non-function values and calls them with the given args otherwise.\n * @param {function(...args: any[]): any | any} value The value to return or function to call.\n * @param {...any} [args] The arguments to apply if value is a function.\n * @return {any} The value or function call result.\n */\nfunction allowFunction(value, ...args) {\n  if (typeof value === 'function') {\n    return value(...args);\n  }\n\n  return value;\n}\n\n/**\n * The command invoked when running \"init\".\n */\nexport default class InitCommand extends Command {\n  /**\n   * Creates a new {@link InitCommand} with the specified name and description.\n   * @param {string} name The command's name.\n   * @param {string} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      options: {\n        yes: CliOptions.yes,\n        force: CliOptions.force,\n        beta: CliOptions.beta,\n        link: CliOptions.link,\n      },\n    });\n  }\n\n  /**\n   * Checks if the given path contains an empty directory. OS specific temporary files (*.DS_Store*\n   * under macOS, *thumbs* under Windows) are ignored.\n   * @param {string} path The path to check.\n   * @param {boolean} [overwrite=false] If existing files should be overwritten.\n   * @return {Promise<string, Error>} Fulfilled with the valid directory's path, rejected if `path`\n   * contains no or a non-empty directory.\n   */\n  checkDirectory(path, overwrite = false) {\n    return new Promise((resolve, reject) => {\n      readdir(path, (err, files) => {\n        if (err) {\n          if (err.code === 'ENOENT') {\n            reject(new Error(`${Logger.format.path(path)} does not exist`));\n          } else if (err.code === 'ENOTDIR') {\n            reject(new Error(`${Logger.format.path(path)} is not a directory`));\n          } else {\n            reject(err);\n          }\n        } else if (files.filter((f) => !IgnoredFiles.includes(f.toLowerCase())).length > 0) {\n          const message = `${Logger.format.path(path)} is not empty`;\n\n          if (overwrite) {\n            Logger.warn(message);\n            Logger.warn(Logger.colors.yellow('Using --force, continue...'));\n            resolve(path);\n          } else {\n            reject(new Error(message));\n          }\n        } else {\n          resolve(path);\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a an empty *package* file at the given path.\n   * @param {string} path The location to create the package at.\n   * @return {Promise<undefined, Error>} Rejected if an error occurred while writing the file.\n   */\n  createEmptyPackage(path) {\n    return new Promise((resolve, reject) => {\n      writeFile(join(path, 'package.json'), '{}', (err) => {\n        if (err) {\n          // FIXME: Call with SystemError class\n          reject(\n            Object.assign(err, {\n              message: `Unable to create package.json at ${path}`,\n              originalMessage: err.message,\n            })\n          );\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs npm with the given args.\n   * @param {string[]} args The arguments to call npm with.\n   * @param {Object} options Options applied to the spawn call.\n   */\n  runNpm(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      which('npm', (err, npm) => {\n        if (err) {\n          return reject(err);\n        }\n\n        const child = spawn(\n          npm,\n          args,\n          Object.assign({}, options, {\n            /* stdio: 'inherit' */\n          })\n        )\n          .on('error', (npmErr) => reject(npmErr))\n          .on('close', (code) => {\n            if (code > 0) {\n              reject(new Error(`npm ${args[0]} returned code ${code}`));\n            } else {\n              resolve();\n            }\n          });\n\n        Logger.pipeLastLine(child.stderr);\n        Logger.pipeLastLine(child.stdout);\n\n        return child;\n      });\n    });\n  }\n\n  /**\n   * Runs `npm install --save-dev {packages}` at the given path.\n   * @param {string} path The path to install packages at.\n   * @param {string|string[]} packages Names of the packages to install.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  install(path, packages) {\n    return this.runNpm(['install', '--save-dev'].concat(packages), { cwd: path });\n  }\n\n  /**\n   * Installs the local atscm module at the given path.\n   * @param {string} path The path to install the module at.\n   * @param {Object} options The options to use.\n   * @param {boolean} [options.useBetaRelease=false] If beta versions should be used.\n   * @param {boolean} [options.link=false] Link instead of installing.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  async installLocal(path, { beta: useBetaRelease = false, link = false } = {}) {\n    Logger.info('Installing latest version of atscm...');\n\n    if (useBetaRelease) {\n      Logger.debug(Logger.colors.gray('Using beta release'));\n    }\n\n    await this.install(path, useBetaRelease ? 'atscm@beta' : 'atscm');\n\n    if (link) {\n      Logger.info('Linking atscm...');\n      await this.runNpm(['link', 'atscm'], { cwd: path });\n    }\n  }\n\n  /**\n   * Checks the version of this package against the \"engines > atscm-cli\" field of the newly\n   * installed atscm module's package file.\n   * @param {Liftoff.Environment} env The environment to check.\n   * @return {Liftoff.Environment} The environment to check.\n   * @throws {Error} Throws an error if the atscm-cli version does not match.\n   */\n  checkCliVersion(env) {\n    Logger.debug('Checking atscm-cli version...');\n\n    const required = env.modulePackage.engines['atscm-cli'];\n    if (!validVersion(pkg.version.split('-beta')[0], required)) {\n      Logger.info('Your version of atscm-cli is not compatible with the latest version atscm.');\n      Logger.info('Please run', Logger.format.command('npm install -g atscm-cli'), 'to update.');\n\n      throw new Error(`Invalid atscm-cli version: ${required} required.`);\n    }\n\n    return env;\n  }\n\n  /**\n   * Returns the default values for the given init options.\n   * @param {Object[]} options An array of init options to check.\n   */\n  getDefaultOptions(options) {\n    return options.reduce((current, option) => {\n      if (option.when && !allowFunction(option.when, current)) {\n        return current;\n      }\n\n      let value;\n      if (option.default !== undefined) {\n        value = option.default;\n      } else if (option.choices) {\n        const [firstChoice] = allowFunction(option.choices, current);\n        value = firstChoice.value || firstChoice;\n      }\n\n      return Object.assign(current, {\n        [option.name]: value,\n      });\n    }, {});\n  }\n\n  /**\n   * Resolves the needed options from the local atscm module and asks for them. These options are\n   * stored in the `atscm` module inside `out/init/options`.\n   * @param {string} modulePath The path to the local module to use.\n   * @param {Object} [options] The options to use.\n   * @param {boolean} [options.useDefaults=false] Use default values.\n   * @return {Promise<Object, Error>} Resolved with the chosen options.\n   */\n  getOptions(modulePath, { useDefaults = false } = {}) {\n    // eslint-disable-next-line global-require\n    const options = defaultExport(require(join(modulePath, '../init/options')));\n\n    if (useDefaults) {\n      return this.getDefaultOptions(options);\n    }\n\n    Logger.info('Answer these questions to create a new project:');\n    return prompt(options);\n  }\n\n  /**\n   * Runs the local atscm module's init script. This script is stored in the `atscm` module inside\n   * `out/init/init`.\n   * @param {string} modulePath The path to the local module to use.\n   * @param {Object} options The options to apply (Received by calling\n   * {@link InitCommand#getOptions}).\n   * @return {Promise<{install: string[]}, Error>} Resolved with information on the further init\n   * steps (which dependencies are needed), rejected with an error if running the init script\n   * failed.\n   */\n  writeFiles(modulePath, options) {\n    // eslint-disable-next-line global-require\n    return defaultExport(require(join(modulePath, '../init/init')))(options);\n  }\n\n  /**\n   * Installs any additional dependencies needed after writing files.\n   * @param {string} path The path to install the dependencies at.\n   * @param {string[]} deps Names of the packages to install.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  installDependencies(path, deps) {\n    Logger.info('Installing dependencies...');\n\n    return this.install(path, deps);\n  }\n\n  /**\n   * Creates a new atscm project.\n   * @param {AtSCMCli} cli The current Cli instance.\n   */\n  run(cli) {\n    return cli\n      .getEnvironment(false)\n      .then((env) => this.checkDirectory(env.cwd, cli.options.force))\n      .then(() => this.createEmptyPackage(cli.environment.cwd))\n      .then(() => this.installLocal(cli.environment.cwd, cli.options))\n      .then(() => cli.getEnvironment(false))\n      .then((env) => this.checkCliVersion(env))\n      .then((env) => process.chdir(env.cwd))\n      .then(() => this.getOptions(cli.environment.modulePath, { useDefaults: cli.options.yes }))\n      .then((options) =>\n        this.writeFiles(cli.environment.modulePath, Object.assign({}, cli.environment, options))\n      )\n      .then((result) => this.installDependencies(cli.environment.cwd, result.install))\n      .then(async () => {\n        if (cli.options.link) {\n          Logger.info('Linking atscm...');\n          await this.runNpm(['link', 'atscm'], { cwd: cli.environment.cwd });\n        }\n      })\n      .then(() => {\n        Logger.info('Created new project at', Logger.format.path(cli.environment.cwd));\n      });\n  }\n\n  /**\n   * This command never requires an {@link Liftoff.Environment}.\n   * @return {boolean} Always `false`.\n   */\n  requiresEnvironment() {\n    return false;\n  }\n}\n"],"file":"Init.js"}