{"version":3,"sources":["../../../src/lib/util/Logger.js"],"names":["logConsole","Console","process","stdout","stderr","LogFormat","path","chalk","magenta","command","bold","value","cyan","number","Logger","colors","format","prefix","pad","val","slice","now","Date","timestamp","getHours","getMinutes","getSeconds","join","gray","debug","message","gulplog","info","warn","error","types","applyOptions","options","tasksSimple","silent","logLevel","on","_handled","filter","item","i","handle","forEach","level","args","concat","pipeLastLine","stream","loggedBefore","d","lines","toString","split","l","trim","readline","moveCursor","clearLine","length","cursorTo"],"mappings":"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","sourcesContent":["import readline from 'readline';\nimport { Console } from 'console';\nimport gulplog from 'gulplog';\nimport chalk from 'chalk';\nimport tildify from 'tildify';\n\nconst logConsole = new Console(process.stdout, process.stderr);\n\n/**\n * Formats strings to be used in the {@link Logger}.\n */\nexport class LogFormat {\n  /**\n   * Formats a string to represent a path.\n   * @param {string} path The path to format.\n   * @return {string} The formatted string.\n   */\n  static path(path) {\n    return chalk.magenta(tildify(path));\n  }\n\n  /**\n   * Formats a string to represent a command.\n   * @param {string} command The command to format.\n   * @return {string} The formatted string.\n   */\n  static command(command) {\n    return chalk.bold(command);\n  }\n\n  /**\n   * Formats a string to represent a value. Use this format for files, module names, etc.\n   * @param {string} value The value to format.\n   * @return {string} The formatted string.\n   */\n  static value(value) {\n    return chalk.cyan(value);\n  }\n\n  /**\n   * Formats a string to represent a number. Use this format for times, counts, etc.\n   * @param {string} number The value to format.\n   * @return {string} The formatted string.\n   */\n  static number(number) {\n    return chalk.magenta(number);\n  }\n}\n\n/**\n * A logger used in all console outputs.\n * **Should never be instantiated.**\n * Log levels, `--silent`-flags etc. are handled automatically by {@link gulplog}.\n */\nexport default class Logger {\n  /**\n   * An instance of {@link chalk}.\n   * @type {chalk}\n   */\n  static get colors() {\n    return chalk;\n  }\n\n  /**\n   * An instance of {@link LogFormat}.\n   * @type {LogFormat}\n   */\n  static get format() {\n    return LogFormat;\n  }\n\n  /**\n   * The prefix added to each log. Should always equal fancy-log's prefix.\n   * @type {string}\n   * @see {@link gulplog}\n   */\n  static get prefix() {\n    function pad(val) {\n      return `00${val}`.slice(-2);\n    }\n\n    const now = new Date();\n    const timestamp = [pad(now.getHours()), pad(now.getMinutes()), pad(now.getSeconds())].join(':');\n\n    return `[${chalk.gray(timestamp)}]`;\n  }\n\n  /**\n   * Print debug messages.\n   * @param {...string} message The message(s) to print.\n   */\n  static debug(...message) {\n    gulplog.debug(...message);\n  }\n\n  /**\n   * Print regular logs.\n   * @param {...string} message The message(s) to print.\n   */\n  static info(...message) {\n    gulplog.info(...message);\n  }\n\n  /**\n   * Print warnings.\n   * @param {...string} message The message(s) to print.\n   */\n  static warn(...message) {\n    gulplog.warn(...message);\n  }\n\n  /**\n   * Print error messages.\n   * @param {...string} message The message(s) to print.\n   */\n  static error(...message) {\n    gulplog.error(...message);\n  }\n\n  /**\n   * The log types available.\n   * @type {string[]}\n   */\n  static get types() {\n    return ['error', 'warn', 'info', 'debug'];\n  }\n\n  /**\n   * Apply options to the logger.\n   * **Should only be called once.**.\n   * @param {Object} options Options passed to {@link gulplog}.\n   */\n  static applyOptions(options) {\n    if (options.tasksSimple || options.silent || options.logLevel === 0) {\n      gulplog.on('error', () => {});\n      return;\n    }\n\n    /**\n     * The log types handled.\n     * @type {Map<String, Boolean>}\n     */\n    this._handled = {};\n\n    this.types\n      .filter((item, i) => {\n        const handle = i < options.logLevel;\n\n        this._handled[item] = handle;\n\n        return handle;\n      })\n      .forEach((level) =>\n        gulplog.on(level, (...args) => {\n          logConsole[level === 'error' ? 'error' : 'info'](...[this.prefix].concat(args));\n        })\n      );\n  }\n\n  /**\n   * Pipes a readable stream and logs the last line of each chunk processed.\n   * @param {node.stream.Readable} stream The stream to pipe.\n   */\n  static pipeLastLine(stream) {\n    let loggedBefore = false;\n\n    stream\n      .on('data', (d) => {\n        const lines = d\n          .toString()\n          .split('\\n')\n          .filter((l) => l.trim() !== '');\n\n        if (loggedBefore && this._handled.info) {\n          readline.moveCursor(process.stdout, 0, -1);\n          readline.clearLine(process.stdout);\n        }\n\n        Logger.info(lines[lines.length - 1]);\n        loggedBefore = true;\n      })\n      .on('end', () => {\n        if (loggedBefore && this._handled.info) {\n          readline.moveCursor(process.stdout, 0, -1);\n          readline.clearLine(process.stdout);\n          readline.cursorTo(process.stdout, 0);\n        }\n      });\n  }\n}\n"],"file":"Logger.js"}