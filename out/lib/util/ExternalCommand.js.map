{"version":3,"sources":["../../../src/lib/util/ExternalCommand.js"],"names":["ExternalCommand","resolveBin","name","Promise","resolve","reject","err","path","spawn","bin","args","options","stdout","Logger","debug","format","command","join","child","once","code","Error","trim","on","d","toString","onspawn","run","then"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,eAAN,CAAsB;AACnC;;;;;;AAMA,SAAOC,UAAP,CAAkBC,IAAlB,EAAwB;AACtB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,0BAAMH,IAAN,EAAY,CAACI,GAAD,EAAMC,IAAN,KAAe;AACzB,YAAID,GAAJ,EAAS;AACPD,UAAAA,MAAM,CAACC,GAAD,CAAN;AACD,SAFD,MAEO;AACLF,UAAAA,OAAO,CAACG,IAAD,CAAP;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;AAED;;;;;;;;;;;;;;;AAaA,SAAOC,KAAP,CAAaC,GAAb,EAAkBC,IAAI,GAAG,EAAzB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACzC,WAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIO,MAAM,GAAG,EAAb;;AAEAC,sBAAOC,KAAP,CAAa,SAAb,EAAwBD,gBAAOE,MAAP,CAAcC,OAAd,CAAuB,GAAEP,GAAI,IAAGC,IAAI,CAACO,IAAL,CAAU,GAAV,CAAe,EAA/C,CAAxB;;AACA,YAAMC,KAAK,GAAG,0BAAMT,GAAN,EAAWC,IAAX,EAAiBC,OAAO,CAACH,KAAR,IAAiBG,OAAlC,EACXQ,IADW,CACN,OADM,EACIb,GAAD,IAASD,MAAM,CAACC,GAAD,CADlB,EAEXa,IAFW,CAEN,OAFM,EAEIC,IAAD,IAAU;AACvB,YAAIA,IAAI,GAAG,CAAX,EAAc;AACZf,UAAAA,MAAM,CAAC,IAAIgB,KAAJ,CAAW,GAAEZ,GAAI,IAAGC,IAAI,CAACO,IAAL,CAAU,GAAV,CAAe,kBAAiBG,IAAK,EAAzD,CAAD,CAAN;AACD,SAFD,MAEO;AACLhB,UAAAA,OAAO,CAACQ,MAAM,CAACU,IAAP,EAAD,CAAP;AACD;AACF,OARW,CAAd;AAUAJ,MAAAA,KAAK,CAACN,MAAN,CAAaW,EAAb,CAAgB,MAAhB,EAAyBC,CAAD,IAAQZ,MAAM,IAAIY,CAAC,CAACC,QAAF,EAA1C;;AAEA,UAAId,OAAO,CAACe,OAAZ,EAAqB;AACnBf,QAAAA,OAAO,CAACe,OAAR,CAAgBR,KAAhB;AACD;AACF,KAnBM,CAAP;AAoBD;AAED;;;;;;;;;;;;;;;AAaA,SAAOS,GAAP,CAAWzB,IAAX,EAAiBQ,IAAjB,EAAuBC,OAAvB,EAAgC;AAC9B,WAAO,KAAKV,UAAL,CAAgBC,IAAhB,EAAsB0B,IAAtB,CAA4BnB,GAAD,IAAS,KAAKD,KAAL,CAAWC,GAAX,EAAgBC,IAAhB,EAAsBC,OAAtB,CAApC,CAAP;AACD;;AAtEkC","sourcesContent":["import { spawn } from 'child_process';\nimport which from 'which';\nimport Logger from './Logger';\n\n/**\n * A static class providing utilities to run external commands.\n */\nexport default class ExternalCommand {\n  /**\n   * Resolves the executable path for the given command.\n   * @param {string} name The command to resolve.\n   * @return {Promise<string, Error>} Fulfilled with the executable path or the error that occured\n   * while running `which`.\n   */\n  static resolveBin(name) {\n    return new Promise((resolve, reject) => {\n      which(name, (err, path) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(path);\n        }\n      });\n    });\n  }\n\n  /**\n   * Spawns an executable with the given args and options. See the node docs on the `child_process`\n   * module for all available spawn options.\n   * @param {string} bin Path to the executable to run.\n   * @param {string[]} [args=[]] The arguments to use.\n   * @param {Object} [options] The options to use.\n   * @param {Object} [options.spawn] Options to use for the spawned process.\n   * @param {function(process: node.ChildProcess)} [options.onspawn] Callback to call once the\n   * process was created. Useful for handling stdio events etc.\n   * @return {Promise<string, Error>} Fulfilled with the child process' stdout or rejected with a\n   * spawn error or non-zero exit code.\n   * @see {@link node.ChildProcess}\n   */\n  static spawn(bin, args = [], options = {}) {\n    return new Promise((resolve, reject) => {\n      let stdout = '';\n\n      Logger.debug('Running', Logger.format.command(`${bin} ${args.join(' ')}`));\n      const child = spawn(bin, args, options.spawn || options)\n        .once('error', (err) => reject(err))\n        .once('close', (code) => {\n          if (code > 0) {\n            reject(new Error(`${bin} ${args.join(' ')} returned code ${code}`));\n          } else {\n            resolve(stdout.trim());\n          }\n        });\n\n      child.stdout.on('data', (d) => (stdout += d.toString()));\n\n      if (options.onspawn) {\n        options.onspawn(child);\n      }\n    });\n  }\n\n  /**\n   * Resolves the executable for the given command and runs it with the arguments and options given.\n   * See the node docs on the `child_process` module for all available spawn options.\n   * @param {string} name The command to run.\n   * @param {string[]} [args] The arguments to use.\n   * @param {Object} [options] The options to use.\n   * @param {Object} [options.spawn] Options to use for the spawned process.\n   * @param {function(process: node.ChildProcess)} [options.onspawn] Callback to call once the\n   * process was created. Useful for handling stdio events etc.\n   * @return {Promise<string, Error>} Fulfilled with the child process' stdout or rejected with a\n   * spawn error, a non-zero exit code or an error that occured while running `which`.\n   * @see {@link node.ChildProcess}\n   */\n  static run(name, args, options) {\n    return this.resolveBin(name).then((bin) => this.spawn(bin, args, options));\n  }\n}\n"],"file":"ExternalCommand.js"}