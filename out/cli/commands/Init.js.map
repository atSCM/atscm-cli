{"version":3,"sources":["../../../src/cli/commands/Init.js"],"names":["IgnoredFiles","defaultExport","mod","default","allowFunction","value","args","InitCommand","constructor","name","description","options","yes","force","beta","link","checkDirectory","path","overwrite","Promise","resolve","reject","err","files","code","Error","format","filter","f","includes","toLowerCase","length","message","warn","colors","yellow","createEmptyPackage","Object","assign","originalMessage","runNpm","npm","child","on","npmErr","pipeLastLine","stderr","stdout","install","packages","concat","cwd","installLocal","useBetaRelease","info","debug","gray","checkCliVersion","env","required","modulePackage","engines","version","split","command","getDefaultOptions","reduce","current","option","when","undefined","choices","firstChoice","getOptions","modulePath","useDefaults","require","writeFiles","installDependencies","deps","run","cli","getEnvironment","then","environment","process","chdir","result","requiresEnvironment"],"mappings":"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","file":"Init.js","sourcesContent":["import { readdir, writeFile } from 'fs';\nimport { join } from 'path';\nimport { spawn } from 'child_process';\nimport which from 'which';\nimport { prompt } from 'inquirer';\nimport { satisfies as validVersion } from 'semver';\nimport Command from '../../lib/cli/Command';\nimport Logger from '../../lib/util/Logger';\nimport pkg from '../../../package.json';\nimport CliOptions from '../Options';\n\nconst IgnoredFiles = ['.ds_store', 'thumbs.db'];\n\n/**\n * Returns the default export of a module, if present.\n * @param {any | { default: any }} mod The required module.\n * @return {any} The module's default export.\n */\nfunction defaultExport(mod) {\n  return (mod.default || mod);\n}\n\n/**\n * Utility that returns any non-function values and calls them with the given args otherwise.\n * @param {function(...args: any[]): any | any} value The value to return or function to call.\n * @param {...any} [args] The arguments to apply if value is a function.\n * @return {any} The value or function call result.\n */\nfunction allowFunction(value, ...args) {\n  if (typeof value === 'function') {\n    return value(...args);\n  }\n\n  return value;\n}\n\n/**\n * The command invoked when running \"init\".\n */\nexport default class InitCommand extends Command {\n\n  /**\n   * Creates a new {@link InitCommand} with the specified name and description.\n   * @param {string} name The command's name.\n   * @param {string} description The command's description.\n   */\n  constructor(name, description) {\n    super(name, description, {\n      options: {\n        yes: CliOptions.yes,\n        force: CliOptions.force,\n        beta: CliOptions.beta,\n        link: CliOptions.link,\n      },\n    });\n  }\n\n  /**\n   * Checks if the given path contains an empty directory. OS specific temporary files (*.DS_Store*\n   * under macOS, *thumbs* under Windows) are ignored.\n   * @param {string} path The path to check.\n   * @param {boolean} [overwrite=false] If existing files should be overwritten.\n   * @return {Promise<String, Error>} Fulfilled with the valid directory's path, rejected if `path`\n   * contains no or a non-empty directory.\n   */\n  checkDirectory(path, overwrite = false) {\n    return new Promise((resolve, reject) => {\n      readdir(path, (err, files) => {\n        if (err) {\n          if (err.code === 'ENOENT') {\n            reject(new Error(`${Logger.format.path(path)} does not exist`));\n          } else if (err.code === 'ENOTDIR') {\n            reject(new Error(`${Logger.format.path(path)} is not a directory`));\n          } else {\n            reject(err);\n          }\n        } else if (files.filter(f => !IgnoredFiles.includes(f.toLowerCase())).length > 0) {\n          const message = `${Logger.format.path(path)} is not empty`;\n\n          if (overwrite) {\n            Logger.warn(message);\n            Logger.warn(Logger.colors.yellow('Using --force, continue...'));\n            resolve(path);\n          } else {\n            reject(new Error(message));\n          }\n        } else {\n          resolve(path);\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a an empty *package* file at the given path.\n   * @param {string} path The location to create the package at.\n   * @return {Promise<undefined, Error>} Rejected if an error occurred while writing the file.\n   */\n  createEmptyPackage(path) {\n    return new Promise((resolve, reject) => {\n      writeFile(join(path, 'package.json'), '{}', err => {\n        if (err) {\n          // FIXME: Call with SystemError class\n          reject(Object.assign(err, {\n            message: `Unable to create package.json at ${path}`,\n            originalMessage: err.message,\n          }));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs npm with the given args.\n   * @param {string[]} args The arguments to call npm with.\n   * @param {Object} options Options applied to the spawn call.\n   */\n  runNpm(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      which('npm', (err, npm) => {\n        if (err) { return reject(err); }\n\n        const child = spawn(npm, args, Object.assign({}, options, { /* stdio: 'inherit' */ }))\n          .on('error', npmErr => reject(npmErr))\n          .on('close', code => {\n            if (code > 0) {\n              reject(new Error(`npm ${args[0]} returned code ${code}`));\n            } else {\n              resolve();\n            }\n          });\n\n        Logger.pipeLastLine(child.stderr);\n        Logger.pipeLastLine(child.stdout);\n\n        return child;\n      });\n    });\n  }\n\n  /**\n   * Runs `npm install --save-dev {packages}` at the given path.\n   * @param {string} path The path to install packages at.\n   * @param {String|String[]} packages Names of the packages to install.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  install(path, packages) {\n    return this.runNpm(['install', '--save-dev'].concat(packages), { cwd: path });\n  }\n\n  /**\n   * Installs the local atscm module at the given path.\n   * @param {string} path The path to install the module at.\n   * @param {Object} options The options to use.\n   * @param {boolean} [options.useBetaRelease=false] If beta versions should be used.\n   * @param {boolean} [options.link=false] Link instead of installing.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  async installLocal(path, { beta: useBetaRelease = false, link = false } = {}) {\n    Logger.info('Installing latest version of atscm...');\n\n    if (useBetaRelease) {\n      Logger.debug(Logger.colors.gray('Using beta release'));\n    }\n\n    await this.install(path, useBetaRelease ? 'atscm@beta' : 'atscm');\n\n    if (link) {\n      Logger.info('Linking atscm...');\n      await this.runNpm(['link', 'atscm'], { cwd: path });\n    }\n  }\n\n  /**\n   * Checks the version of this package against the \"engines > atscm-cli\" field of the newly\n   * installed atscm module's package file.\n   * @param {Liftoff.Environment} env The environment to check.\n   * @return {Liftoff.Environment} The environment to check.\n   * @throws {Error} Throws an error if the atscm-cli version does not match.\n   */\n  checkCliVersion(env) {\n    Logger.debug('Checking atscm-cli version...');\n\n    const required = env.modulePackage.engines['atscm-cli'];\n    if (!validVersion(pkg.version.split('-beta')[0], required)) {\n      Logger.info('Your version of atscm-cli is not compatible with the latest version atscm.');\n      Logger.info('Please run', Logger.format.command('npm install -g atscm-cli'), 'to update.');\n\n      throw new Error(`Invalid atscm-cli version: ${required} required.`);\n    }\n\n    return env;\n  }\n\n  /**\n   * Returns the default values for the given init options.\n   * @param {Object[]} options An array of init options to check.\n   */\n  getDefaultOptions(options) {\n    return options.reduce((current, option) => {\n      if (option.when && !allowFunction(option.when, current)) {\n        return current;\n      }\n\n      let value;\n      if (option.default !== undefined) {\n        value = option.default;\n      } else if (option.choices) {\n        const [firstChoice] = allowFunction(option.choices, current);\n        value = firstChoice.value || firstChoice;\n      }\n\n      return Object.assign(current, {\n        [option.name]: value,\n      });\n    }, {});\n  }\n\n  /**\n   * Resolves the needed options from the local atscm module and asks for them. These options are\n   * stored in the `atscm` module inside `out/init/options`.\n   * @param {string} modulePath The path to the local module to use.\n   * @param {Object} [options] The options to use.\n   * @param {boolean} [options.useDefaults=false] Use default values.\n   * @return {Promise<Object, Error>} Resolved with the chosen options.\n   */\n  getOptions(modulePath, { useDefaults = false } = {}) {\n    // eslint-disable-next-line global-require\n    const options = defaultExport(require(join(modulePath, '../init/options')));\n\n    if (useDefaults) {\n      return this.getDefaultOptions(options);\n    }\n\n    Logger.info('Answer these questions to create a new project:');\n    return prompt(options);\n  }\n\n  /**\n   * Runs the local atscm module's init script. This script is stored in the `atscm` module inside\n   * `out/init/init`.\n   * @param {string} modulePath The path to the local module to use.\n   * @param {Object} options The options to apply (Received by calling\n   * {@link InitCommand#getOptions}).\n   * @return {Promise<{install: String[]}, Error>} Resolved with information on the further init\n   * steps (e.g. which dependencies are needed), rejected with an error if running the init script\n   * failed.\n   */\n  writeFiles(modulePath, options) {\n    // eslint-disable-next-line global-require\n    return defaultExport(require(join(modulePath, '../init/init')))(options);\n  }\n\n  /**\n   * Installs any additional dependencies needed after writing files.\n   * @param {string} path The path to install the dependencies at.\n   * @param {String[]} deps Names of the packages to install.\n   * @return {Promise<undefined, Error>} Rejected if installing failed, resolved otherwise.\n   */\n  installDependencies(path, deps) {\n    Logger.info('Installing dependencies...');\n\n    return this.install(path, deps);\n  }\n\n  /**\n   * Creates a new atscm project.\n   * @param {AtSCMCli} cli The current Cli instance.\n   */\n  run(cli) {\n    return cli.getEnvironment(false)\n      .then(env => this.checkDirectory(env.cwd, cli.options.force))\n      .then(() => this.createEmptyPackage(cli.environment.cwd))\n      .then(() => this.installLocal(cli.environment.cwd, cli.options))\n      .then(() => cli.getEnvironment(false))\n      .then(env => this.checkCliVersion(env))\n      .then(env => process.chdir(env.cwd))\n      .then(() => this.getOptions(cli.environment.modulePath, { useDefaults: cli.options.yes }))\n      .then(options => this.writeFiles(\n        cli.environment.modulePath,\n        Object.assign({}, cli.environment, options)\n      ))\n      .then(result => this.installDependencies(cli.environment.cwd, result.install))\n      .then(async () => {\n        if (cli.options.link) {\n          Logger.info('Linking atscm...');\n          await this.runNpm(['link', 'atscm'], { cwd: cli.environment.cwd });\n        }\n      })\n      .then(() => {\n        Logger.info('Created new project at', Logger.format.path(cli.environment.cwd));\n      });\n  }\n\n  /**\n   * This command never requires an {@link Liftoff.Environment}.\n   * @return {boolean} Always `false`.\n   */\n  requiresEnvironment() {\n    return false;\n  }\n\n}\n"]}