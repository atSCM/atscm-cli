{"version":3,"sources":["../../src/cli/Options.js"],"names":["Options","browser","Option","string","cli","boolean","continue","cwd","force","help","alias","count","default","project","projectfile","require","remote","undefined","silent","tasks","version","beta","debug","yes","link","GlobalOptions"],"mappings":";;;;;;;AAAA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAEC,gBAAOC,MAAP,CAAc,2BAAd,CADK;AAEdC,EAAAA,GAAG,EAAEF,gBAAOG,OAAP,CAAe,yBAAf,CAFS;AAGdC,EAAAA,QAAQ,EAAEJ,gBAAOG,OAAP,CAAe,2CAAf,CAHI;AAIdE,EAAAA,GAAG,EAAEL,gBAAOC,MAAP,CAAc,uBAAd,CAJS;AAKdK,EAAAA,KAAK,EAAEN,gBAAOG,OAAP,CAAe,2BAAf,CALO;AAMdI,EAAAA,IAAI,EAAEP,gBAAOG,OAAP,CAAe,iBAAf,CANQ;AAOd,eAAa,IAAIH,eAAJ,CACX,yFADW,EAEX;AACEQ,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,KAAK,EAAE,IAFT;AAGEC,IAAAA,OAAO,EAAE;AAHX,GAFW,CAPC;AAedC,EAAAA,OAAO,EAAE,IAAIX,eAAJ,CAAW,gCAAX,EAA6C;AAAEU,IAAAA,OAAO,EAAE;AAAX,GAA7C,CAfK;AAgBdE,EAAAA,WAAW,EAAEZ,gBAAOC,MAAP,CACX,qDACE,sEAFS,EAGX;AAAEO,IAAAA,KAAK,EAAE;AAAT,GAHW,CAhBC;AAqBdK,EAAAA,OAAO,EAAEb,gBAAOC,MAAP,CAAc,6CAAd,CArBK;AAsBda,EAAAA,MAAM,EAAEd,gBAAOG,OAAP,CAAe,4BAAf,EAA6C;AACnDO,IAAAA,OAAO,EAAEK;AAD0C,GAA7C,CAtBM;AAyBdC,EAAAA,MAAM,EAAEhB,gBAAOG,OAAP,CAAe,uBAAf,EAAwC;AAAEK,IAAAA,KAAK,EAAE;AAAT,GAAxC,CAzBM;AA0BdS,EAAAA,KAAK,EAAEjB,gBAAOG,OAAP,CAAe,iCAAf,EAAkD;AACvDK,IAAAA,KAAK,EAAE;AADgD,GAAlD,CA1BO;AA6Bd,kBAAgBR,gBAAOG,OAAP,CAAe,kCAAf,CA7BF;AA8Bd,gBAAcH,gBAAOG,OAAP,CAAe,iDAAf,CA9BA;AA+Bde,EAAAA,OAAO,EAAElB,gBAAOG,OAAP,CAAe,gBAAf,EAAiC;AAAEK,IAAAA,KAAK,EAAE;AAAT,GAAjC,CA/BK;AAgCdW,EAAAA,IAAI,EAAEnB,gBAAOG,OAAP,CAAe,2BAAf,CAhCQ;AAiCdiB,EAAAA,KAAK,EAAEpB,gBAAOG,OAAP,CAAe,iBAAf,CAjCO;AAkCdkB,EAAAA,GAAG,EAAErB,gBAAOG,OAAP,CAAe,qBAAf,EAAsC;AAAEK,IAAAA,KAAK,EAAE;AAAT,GAAtC,CAlCS;AAmCd;AACAc,EAAAA,IAAI,EAAEtB,gBAAOG,OAAP,CACJ,uCACE,0EAFE;AApCQ,CAAhB;eA0CeL,O;AAEf;AACA;AACA;AACA;;;AACO,MAAMyB,aAAa,GAAG;AAC3BX,EAAAA,WAAW,EAAEd,OAAO,CAACc,WADM;AAE3BP,EAAAA,GAAG,EAAEP,OAAO,CAACO,GAFc;AAG3BM,EAAAA,OAAO,EAAEb,OAAO,CAACa,OAHU;AAI3BE,EAAAA,OAAO,EAAEf,OAAO,CAACe,OAJU;AAK3BK,EAAAA,OAAO,EAAEpB,OAAO,CAACoB,OALU;AAM3BX,EAAAA,IAAI,EAAET,OAAO,CAACS,IANa;AAO3BS,EAAAA,MAAM,EAAElB,OAAO,CAACkB,MAPW;AAQ3B,eAAalB,OAAO,CAAC,WAAD,CARO;AAS3BsB,EAAAA,KAAK,EAAEtB,OAAO,CAACsB;AATY,CAAtB","sourcesContent":["import Option from '../lib/cli/Option';\n\n/**\n * Command line options available.\n * @type {Object}\n * @property {Option} browser Which browser to open in.\n * @property {Option} cli Open CLI documentation.\n * @property {Option} config Print project configuration.\n * @property {Option} cwd Manually set the CWD.\n * @property {Option} force Overwrite existing files.\n * @property {Option} help Show help.\n * @property {Option} logLevel Set the Logger level.\n * @property {Option} projectfile Manually set path of Atviseproject file to use.\n * @property {Option} remote Open hosted documentation.\n * @property {Option} silent Supress all logging.\n * @property {Option} version Print version.\n * @property {Option} beta Use atscm beta resources.\n */\nconst Options = {\n  browser: Option.string('Which browser to open in.'),\n  cli: Option.boolean('Open CLI documentation.'),\n  continue: Option.boolean('Continue execution of tasks upon failure.'),\n  cwd: Option.string('Manually set the CWD.'),\n  force: Option.boolean('Overwrite existing files.'),\n  help: Option.boolean('Show this help.'),\n  'log-level': new Option(\n    'Set the Logger level. -L for least verbose and -LLLL for most verbose. -LLL is default.',\n    {\n      alias: 'L',\n      count: true,\n      default: 3,\n    }\n  ),\n  project: new Option('Override Atviseproject values.', { default: {} }),\n  projectfile: Option.string(\n    'Manually set path of Atviseproject file to use. ' +\n      \"This will set the CWD to the Atviseproject file's directory as well.\",\n    { alias: 'p' }\n  ),\n  require: Option.string('Will require a module before running atscm.'),\n  remote: Option.boolean('Open hosted documentation.', {\n    default: undefined,\n  }),\n  silent: Option.boolean('Suppress all logging.', { alias: 'S' }),\n  tasks: Option.boolean('Print the task dependency tree.', {\n    alias: 'T',\n  }),\n  'tasks-simple': Option.boolean('Print a plaintext list of tasks.'),\n  'tasks-json': Option.boolean('Print the task dependency tree, in JSON format.'),\n  version: Option.boolean('Print version.', { alias: 'v' }),\n  beta: Option.boolean('Use atscm beta resources.'),\n  debug: Option.boolean('Use debug mode.'),\n  yes: Option.boolean('Use default values.', { alias: 'y' }),\n  // NOTE: Commit once gulp is no longer required for running\n  link: Option.boolean(\n    'Link atscm instead of installing. ' +\n      'This allows you to use you local atscm version. (Run `npm link .` first)'\n  ),\n};\n\nexport default Options;\n\n/**\n * Options that can be used globally.\n * @type {Map<String, Option>}\n */\nexport const GlobalOptions = {\n  projectfile: Options.projectfile,\n  cwd: Options.cwd,\n  project: Options.project,\n  require: Options.require,\n  version: Options.version,\n  help: Options.help,\n  silent: Options.silent,\n  'log-level': Options['log-level'],\n  debug: Options.debug,\n};\n"],"file":"Options.js"}