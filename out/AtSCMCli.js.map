{"version":3,"sources":["../src/AtSCMCli.js"],"names":["AtSCMCli","Liftoff","BinName","Object","keys","pkg","bin","ConfigName","_reportCliError","err","Logger","error","colors","red","message","UsageError","info","help","debug","stack","SyntaxError","_failedRequires","length","join","EOL","process","exitCode","constructor","argv","name","configName","extensions","jsVariants","on","magenta","push","runViaCli","require","resolve","_argv","commandNames","Commands","map","c","options","version","env","option","GlobalOptions","fail","msg","e","y","gulplog","_","filter","includes","unshift","applyOptions","globalOptionNames","argumentsParser","reduce","parser","command","usage","description","group","strict","Options","desc","alias","demandCommand","global","_exposeOverride","config","key","base","currentKey","toUpperCase","forEach","k","format","value","parseArguments","Promise","reject","parse","project","getEnvironment","findUp","launch","cwd","configPath","projectfile","environment","requireEnvironment","then","modulePath","Error","getVersion","projectPackage","catch","undefined","cli","local","modulePackage","server","engines","atserver","printVersion","versions","v","maxLength","label","Math","max","padEnd","number","runCommand","requiresEnvironment","run","warn","app","ATSCM_DEBUG","install"],"mappings":"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","sourcesContent":["import { realpathSync } from 'fs';\nimport { join } from 'path';\nimport { EOL } from 'os';\nimport Liftoff from 'liftoff';\nimport yargs from 'yargs';\nimport gulplog from 'gulplog';\nimport { jsVariants } from 'interpret';\nimport { yellow } from 'chalk';\nimport pkg from '../package.json';\nimport Logger from './lib/util/Logger';\nimport Options, { GlobalOptions } from './cli/Options';\nimport Commands from './cli/Commands';\nimport UsageError from './lib/error/UsageError';\nimport { readJson } from './lib/util/fs';\n\n/**\n * The main class. Handles arguments and runs commands.\n * @extends {Liftoff}\n */\nexport default class AtSCMCli extends Liftoff {\n  /**\n   * The name under which the module is available from the command line.\n   * @type {string}\n   */\n  static get BinName() {\n    return Object.keys(pkg.bin)[0];\n  }\n\n  /**\n   * The filename used for configuration files.\n   * @type {string}\n   */\n  static get ConfigName() {\n    return 'Atviseproject';\n  }\n\n  /**\n   * Reports an error and exits the process with return code `1`.\n   * @param {Error} err The error that occurred.\n   */\n  _reportCliError(err) {\n    Logger.error(Logger.colors.red(err.message));\n\n    if (err instanceof UsageError) {\n      Logger.info(err.help);\n    } else {\n      Logger.debug(err.stack);\n\n      if (err instanceof SyntaxError && this._failedRequires.length) {\n        Logger.info(yellow(`You may have to install the '${this._failedRequires[0]}' module.`));\n        Logger.info(['Other failed requires:', ...this._failedRequires].join(`${EOL} - `));\n      }\n    }\n\n    process.exitCode = 1;\n  }\n\n  /**\n   * Creates a new {@link AtSCMCli} object based on command line arguments.\n   * @param {string[]} argv The command line arguments to use. If no command is provided and neither\n   * `--help` nor `--version` are used, the command `run` is added.\n   * @throws {UsageError} Throws an error if option parsing fails.\n   */\n  constructor(argv = []) {\n    super({\n      name: AtSCMCli.BinName,\n      configName: AtSCMCli.ConfigName,\n      extensions: jsVariants,\n    });\n\n    this.on('require', function (name) {\n      Logger.debug('Requiring external module', Logger.colors.magenta(name));\n    });\n\n    /** If requiring an external module failed.\n     * @type {string[]} */\n    this._failedRequires = [];\n\n    this.on('requireFail', function (name) {\n      this._failedRequires.push(name);\n\n      Logger.debug(\n        Logger.colors.red('Failed to load external module'),\n        Logger.colors.magenta(name)\n      );\n    });\n\n    /**\n     * `true` if the instance was created by running the binaries, `false` if used programmatically.\n     * @type {Boolean}\n     */\n    this.runViaCli = realpathSync(process.argv[1]) === require.resolve('./bin/atscm');\n\n    /**\n     * The raw, unparsed command line arguments the Cli was created with.\n     * @type {String[]}\n     */\n    this._argv = argv;\n\n    // If no command is given, default to \"run\"\n    const commandNames = Commands.map((c) => c.name);\n\n    /**\n     * The options parsed from {@link AtSCMCli#_argv}. Note that **these options are not complete**\n     * until {@link AtSCMCli#launch} was called.\n     * @type {Object}\n     */\n    this.options = yargs(argv)\n      .version(false)\n      .help(false)\n      .env('ATSCM')\n      .option(GlobalOptions)\n      .fail((msg, e, y) => {\n        const err = new UsageError(msg, y.help());\n\n        if (this.runViaCli) {\n          gulplog.on('error', () => {}); // Prevent logger to throw an error\n\n          this._reportCliError(err);\n        } else {\n          throw err;\n        }\n      }).argv;\n\n    if (!this.options.help && !this.options.version) {\n      if (this.options._.filter((e) => commandNames.includes(e)).length === 0) {\n        this._argv.unshift('run');\n      }\n    }\n\n    // Initialize logger\n    Logger.applyOptions(this.options);\n\n    const globalOptionNames = Object.keys(GlobalOptions);\n\n    /**\n     * An instance of {@link yargs} responible for parsing options.\n     * @type {yargs}\n     */\n    this.argumentsParser = Commands.reduce(\n      (parser, command) =>\n        parser.command(\n          command.usage,\n          command.description,\n          (y) => {\n            y.usage(`Usage: $0 ${command.usage}`);\n            y.option(command.options);\n\n            y.group(Object.keys(command.options), 'Command specific options:');\n            y.group(globalOptionNames, 'Global options:');\n\n            y.strict(command.strict);\n            y.help('help', Options.help.desc).alias('help', 'h');\n            y.demandCommand(...command.demandCommand);\n          },\n          () => (this.command = command)\n        ),\n      yargs()\n        .env('ATSCM')\n        .usage('Usage: $0 [cmd=run]')\n        .version(false)\n        .options(GlobalOptions)\n        .global(globalOptionNames)\n        .strict()\n        .help('help', Options.help.desc)\n        .alias('help', 'h')\n    );\n  }\n\n  /**\n   * Used to expose project config overrides via environment variables. All project options are\n   * exposed as `ATSCM_PROJECT__{KEY}={VALUE}`.\n   * @param {Object} config The object to expose.\n   * @param {string} key The key currently handled.\n   * @param {string} [base=ATSCM_PROJECT__] The parent key.\n   */\n  _exposeOverride(config, key, base = 'ATSCM_PROJECT__') {\n    const currentKey = `${base}${key.toUpperCase()}`;\n\n    if (typeof config[key] === 'object') {\n      const c = config[key];\n\n      Object.keys(c).forEach((k) => this._exposeOverride(c, k, `${currentKey}__`));\n    } else {\n      process.env[currentKey] = config[key];\n      Logger.debug(`Setting ${currentKey}:`, Logger.format.value(config[key]));\n    }\n  }\n\n  /**\n   * Parses arguments and exposes the project options as environment variables.\n   * @return {Promise<Object, UsageError>} Rejected with a {@link UsageError} if parsing failed,\n   * otherwise fulfilled with the parsed arguments.\n   */\n  parseArguments() {\n    return new Promise((resolve, reject) => {\n      this.options = this.argumentsParser\n        .fail((msg, err, y) => reject(new UsageError(msg, y.help())))\n        .parse(this._argv);\n\n      Object.keys(this.options.project).forEach((key) =>\n        this._exposeOverride(this.options.project, key)\n      );\n\n      resolve(this.options);\n    });\n  }\n\n  /**\n   * Returns a {@link Liftoff.Environment} for the Cli.\n   * @param {boolean} [findUp=false] If the environment should be searched for in parent\n   * directories.\n   * @return {Promise<Object>} Fulfilled with a {@link Liftoff} environment.\n   */\n  getEnvironment(findUp = true) {\n    return new Promise((resolve) => {\n      super.launch(\n        {\n          cwd: this.options.cwd,\n          configPath: findUp\n            ? this.options.projectfile\n            : join(this.options.cwd || process.cwd(), `${this.constructor.ConfigName}.js`),\n          require: this.options.require,\n        },\n        (env) => resolve((this.environment = env))\n      );\n    });\n  }\n\n  /**\n   * Gets a {@link Liftoff.Environment} and validates a config file and a local module was found.\n   * @return {Promise<Object, Error>} Resolved with the {@link Liftoff environment}, rejected if the\n   * config file or the local module cannot be found.\n   */\n  requireEnvironment() {\n    return this.getEnvironment().then((env) => {\n      if (!env.modulePath) {\n        throw new Error(`Local ${AtSCMCli.BinName} not found`);\n      }\n\n      if (!env.configPath) {\n        throw new Error('No config file found');\n      }\n\n      return env;\n    });\n  }\n\n  /**\n   * Returns the CLI version and, if a local module could be found, the local version.\n   * @return {Promise<{cli: string, local: ?string}>} Fulfilled with the found cli and local\n   * version.\n   */\n  async getVersion() {\n    const env = await this.getEnvironment();\n\n    const projectPackage =\n      env.modulePath && (await readJson(join(env.cwd, 'package.json')).catch(() => undefined));\n\n    return {\n      cli: pkg.version,\n      local: env.modulePath ? env.modulePackage.version : undefined,\n      server: projectPackage && projectPackage.engines && projectPackage.engines.atserver,\n    };\n  }\n\n  /**\n   * Gets and prints the CLI version and, if a local module could be found, the local version.\n   * @return {Promise<{cli: string, local: ?string}>} Fulfilled with the found cli and local\n   * version.\n   */\n  async printVersion() {\n    const { cli, local, server } = await this.getVersion();\n\n    const versions = [\n      ['atscm-cli', cli],\n      local && ['atscm', local],\n      server && ['atvise server', server],\n    ].filter((v) => v);\n\n    const maxLength = versions.reduce((length, [label]) => Math.max(length, label.length), 0);\n\n    versions.forEach(([label, version]) =>\n      Logger.info(label.padEnd(maxLength + 1), Logger.format.number(version))\n    );\n  }\n\n  /**\n   * Runs the command specified in the command line arguments ({@link AtSCMCli#_argv}). **Note that\n   * this will only work if {@link AtSCMCli#parseArguments} was called before.**.\n   * @return {Promise<*, Error>} Fulfilled if the command succeeded.\n   */\n  runCommand() {\n    if (this.options.version) {\n      return this.printVersion();\n    }\n\n    if (this.command) {\n      return (this.command.requiresEnvironment(this)\n        ? this.requireEnvironment()\n        : Promise.resolve()\n      ).then(() => this.command.run(this));\n    }\n\n    Logger.warn('No command specified');\n\n    return Promise.resolve(this);\n  }\n\n  /**\n   * Parses arguments and runs the specified command.\n   * @return {Promise<*, Error>} Fulfilled if the command succeeded. Note that, if the instance is\n   * run through the binary all rejections will be handled.\n   */\n  launch() {\n    const app = this.parseArguments()\n      .then(() => {\n        if (process.env.ATSCM_DEBUG || this.options.debug) {\n          process.env.ATSCM_DEBUG = process.env.ATSCM_DEBUG || 'true';\n          require('source-map-support').install(); // eslint-disable-line global-require\n        }\n      })\n      .then(() => this.runCommand());\n\n    if (this.runViaCli) {\n      return app.catch((err) => this._reportCliError(err));\n    }\n\n    return app;\n  }\n}\n"],"file":"AtSCMCli.js"}